
- USE SPRING 'LIKE' TO DRIVE THE CONFIGURATION . 
not if in geoserver.


VERY IMPORTANT
- the configuration - can actually specify all the different classes that go together to
make up the decoder, projector, filter, encoder etc. to get full control

much like a spring configuration. 

----

CQL ref
http://svemir.co/2012/08/16/introduction-to-cql-and-geoserver-implementation/

Craig's document
https://github.com/aodn/internal_discussions/wiki/Generating-NetCDF-Files-From-the-Database--WIP

netcdf example
https://github.com/four2five/SciHadoop/blob/master/tools/src/edu/ucsc/srl/tools/NetcdfFileGenerator.java


2012-01-01T00:00:00Z


We might have an issue with trying to identify the index of the parameter that's
going to get substituted.

Token (string) token  (parameter)


-------
Need to move the library into the library path.

----
VERY IMPORTANT...
- we are going to need some type of introspection on the tables, so that
we can correctly prefix the table for the parameter.

actually may get away without this for a while.

---

Important - we can do deeper child node matching if we want...
	eg for date between range etc... if don't want to use and

-------
to know to which table the clause applies - we are going to have to do 
a dynamic lookup of the 2 different tables.

Do we really need to fully decode literal types - 
	- integers, dates, strings etc. Or can we keep them
	simply as tokens?
	- probably want to distinguish fields in some way.


-------

tinyscheme
ts> (+ 2 3 4)
ts> (string-append "hi" "there")

--------

subsetted netcdf generation 

- take the code to the server
----------------

values that become dijoint due to filters. eg. filtered over spatial extent, same series enters and leaves.


- jdbc connection - that we can execute.  
- jdbc connection configuration. 

- string test expression.
- find a basic java calc example. or parse ourselves based on cql.  

- typing

- ahhh. 
- temporal type will just be date - ok.
- spatial extent - will need to parse a geometry representation, or the postgres operators 
- might be easier to adopt prefix notation
- contains( geom, ). 
- think we need to construct a couple of sql examples to see what the sql looks like


- library


- name<value,field
- assemble a single netcdf and stream zip ?   

- we have to use geometry because that is the field where that has the spatially indexed value. 
 
	
Mapping from filter syntax -> sql 
- double, date, geometry 
- use an ast? 
- should we write in ocaml as first pass...


- lisp-like to be syntax agnostic. allow us to code up geometry easily as well.

layer=xxx& filter= and ( contains(geom, box( (0,0), ... ), less ( time , 1.1.2015 ) 

- we could actually expose post db transform as well.

- we can expose any of the postgres st functions/operators if we want with this type of syntax.
-


	lispy 
		syntax agnostic, during development 
		ability to parse as ast without complication
		avoid sql injection attack
		very simple tree...

- need to control input, before sql generation? actually it doesn't matter if the sql filter action 
fails at runtime due to typing issues etc.

- basic types are int,double,date, geom representations.
- might have a sub-parser for date types?

node
	symbol
	children

parse_int
parse_identifier 
parse_children
parse_tuple ?

think we need a tokenizer - '(' ')' ints, date, geom

expr = parse_identifer  parse_children
----

sql argument substitution will need to be dynamic...  uggh...
	rather than $1, $2, $3
	no it should be ok.




gg
