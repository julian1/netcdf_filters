
SO MUST MAKE THE DIMS input configured. which means local file. for each one.
	then combine. 

	1. use dimension to set the order clause
	2. use config.

Make the sort dimension explicit as var if not already.

- check integration test IT naming conventions. change test names to ITtimeseries with IT first 

----
PRIORITY
- push the sql projections into the xml. 
- need to be able to select different inputs - either surefile or command line arguments

- have a timeseries, need a trajectory. failsafe to run a specific integration test... 

- connection pool in the unit tests.
- xml config.

----
prototype demonstrate end-to-end filter to subset netcdf generation, with streaming 
on prod data.

WHAT'S DONE
- done sequencing the definition, and data writing phases of netcdf generation 
- done basic subset expression parser/ 
- done postgres dialect rewriter instance
- done netcdf encoder
- done localized convention/ config strategy
- done experimented with a couple of query approaches favor time to start streaming, total time etc. 
- done - write required attributes with strategy
- done - write multiple files (and get the writable instantiation working ) (pass at the time). 
- done-  should specify dimension of a var by name, then we can infer size/count. 
- done - think we have to invert it, instead of trying to infer, use an explicit configuration.
	- It's part of the task.
	- meaning use spring.
- done - mvn project
- done layer configuration into xml file

-----
	http://www.unidata.ucar.edu/software/thredds/v4.3/netcdf-java/reference/faq.html

	Perhaps Easier way to create the array?  
		Array.factory(DataType dataType, int[] shape, Object javaArray);
			
---
TODO

- organize project sources
- generalize to trajectory and profile
- surefire to get code-running.
- config to specify the tables.

- compose with spring ?

-  (cant but have abstracted out) do the netcdf generation in memory

- get dates correctly encoded  (to enable verificiation of filter date range)
- pass table as paraemter to encoder strategy (not sure)
- make a tomcat service

- add support to parser/expr for geometry for spatial constraint choice
- factor encoder strategy chooser - so it's not instantiated, or else use property setters instead of constructor for the writer. 
- postgres - parametize query parameters, rather than use text
- need time,lat,lon
- try on another timeseries, / implement for trajectory
- make it a tomcat webapp
- zip the file stream
- factor into classes
- command-line driven


